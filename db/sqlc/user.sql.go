// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_id,
  hashed_password,
  full_name,
  email,
   files_owned
) VALUES (
  $1, $2, $3, $4,'{}'
) RETURNING user_id, hashed_password, full_name, email, password_changed_at, created_at, files_owned
`

type CreateUserParams struct {
	UserID         string `json:"user_id"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.FilesOwned),
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, hashed_password, full_name, email, password_changed_at, created_at, files_owned FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.FilesOwned),
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  full_name = COALESCE($3, full_name),
  email = COALESCE($4, email)

WHERE
  user_id = $5
RETURNING user_id, hashed_password, full_name, email, password_changed_at, created_at, files_owned
`

type UpdateUserParams struct {
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	FullName          sql.NullString `json:"full_name"`
	Email             sql.NullString `json:"email"`
	UserID            string         `json:"user_id"`
}

//   is_email_verified = COALESCE(sqlc.narg(is_email_verified), is_email_verified)
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.UserID,
	)
	var i Users
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.FilesOwned),
	)
	return i, err
}
